<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A Pelican Blog</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2013-09-19T00:00:00Z</updated><entry><title>启用Kate的内建终端</title><link href="/qi-yong-katede-nei-jian-zhong-duan.html" rel="alternate"></link><updated>2013-09-19T00:00:00Z</updated><author><name></name></author><id>tag:,2013-09-19:qi-yong-katede-nei-jian-zhong-duan.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;操作系统：Arch Linux 3.11.1-1&lt;/li&gt;
&lt;li&gt;桌面环境：KDE 4.11.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="./static/img/kate-with-out-terminal.png" /&gt;&lt;/p&gt;
&lt;p&gt;开学一来就开始布置C作业，用Kate写Py版作业的时候发现Kate的内置终端没有了，折腾了十多分钟才发现自己犯傻了，在Kate设置中，插件那儿把&lt;code&gt;Terminal tool view&lt;/code&gt;这个插件启用就可以了,见下图。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./static/img/kate-configure-terminal.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./static/img/kate-with-terminal.png" /&gt;&lt;/p&gt;</summary><category term="Linux"></category><category term="KDE"></category><category term="Kate"></category></entry><entry><title>使用Google Fonts丰富网页的字体</title><link href="/shi-yong-google-fontsfeng-fu-wang-ye-de-zi-ti.html" rel="alternate"></link><updated>2013-09-14T00:00:00Z</updated><author><name></name></author><id>tag:,2013-09-14:shi-yong-google-fontsfeng-fu-wang-ye-de-zi-ti.html</id><summary type="html">&lt;p&gt;字体啥的，在自己电脑上很好弄，可是问题到了网页上，就是另外一回事儿了，因为你不能确保每个查看你网页的人都有你在网页上使用的字体，今儿就找到一个解决办法：使用Google Fonts&lt;/p&gt;
&lt;h1&gt;寻找到需要的字体&lt;/h1&gt;
&lt;p&gt;首先进入&lt;a href="http://www.google.com/fonts/#HomePlace:home"&gt;Google Fonts首页&lt;/a&gt;，点击页面正中的&lt;code&gt;Start choosing fonts&lt;/code&gt;按钮。&lt;/p&gt;
&lt;p&gt;接下来你会看到一个包含很多字体的列表。你想要用哪一种字体，你就点击那个字体右下角的&lt;code&gt;Add to Collection&lt;/code&gt;按钮，这个时候你选中的字体就会出现在页面下方的框框里。&lt;/p&gt;
&lt;p&gt;如果想要添加多种的字体，重复这步操作即可。&lt;/p&gt;
&lt;h1&gt;预览&lt;/h1&gt;
&lt;p&gt;点击下方显示你选择的字体列表的灰色框框右上角的&lt;code&gt;Review&lt;/code&gt;按钮，接下来你会看到你选择的所有字体的预览，你可以在这里调节字体大小，风格等属性进一步了解你选中的字体的效果。&lt;/p&gt;
&lt;h1&gt;使用&lt;/h1&gt;
&lt;p&gt;点击之前&lt;code&gt;Review&lt;/code&gt;按钮右边的&lt;code&gt;Use&lt;/code&gt;按钮，这个时候你会看到一个页面加载速度的估计，注意： &lt;em&gt;你使用的字体越多，会造成你的网页加载速度更慢&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;继续向下翻这个页面，就能够看到Google向你提供的使用这些字体的对应代码了。默认显示的是HTML（像这样）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//fonts.googleapis.com/css?family=Cinzel+Decorative|Kavoon&amp;#39; rel=&amp;#39;stylesheet&amp;#39; type=&amp;#39;text/css&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这段引用插入到HTML文档的&lt;head&gt;标签里面就可以在你的页面上直接使用这些字体啦！&lt;/p&gt;</summary><category term="Web"></category><category term="Fonts"></category></entry><entry><title>在Linux下用GCC编译C程序</title><link href="/zai-linuxxia-yong-gccbian-yi-ccheng-xu.html" rel="alternate"></link><updated>2013-08-30T00:00:00Z</updated><author><name></name></author><id>tag:,2013-08-30:zai-linuxxia-yong-gccbian-yi-ccheng-xu.html</id><summary type="html">&lt;p&gt;得知第一学期似乎就要搞C了，以前没认真看过，今儿图书馆去翻了本Linux C的书，学会怎么编译先。&lt;/p&gt;
&lt;p&gt;操作环境：Linux 3.10.9-1-ARCH&lt;/p&gt;
&lt;h1&gt;安装GCC&lt;/h1&gt;
&lt;p&gt;Arch安装软件蛮简单的，直接在终端里面&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pacman&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="n"&gt;gcc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就搞定了。&lt;/p&gt;
&lt;h1&gt;使用GCC编译你的C程序&lt;/h1&gt;
&lt;p&gt;最简单的命令，就是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;gcc&lt;/span&gt; &lt;span class="n"&gt;helloc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中选项&lt;code&gt;-o&lt;/code&gt;是指定输出文件位置，正常情况下，执行完之后生成的就是可以运行的二进制文件了。当然，因为这是Linux系统，你可能还需要运行&lt;code&gt;chmod +x hello.out&lt;/code&gt;来赋予执行权限给输出的程序。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;然后GCC还有一些其它的一些常见编译/优化/调试用的选项（参考书上的），这些就在接下来慢慢折腾吧。&lt;/p&gt;
&lt;table border-collapse=collapse&gt;
&lt;tr&gt;&lt;th&gt;选项&lt;/th&gt;&lt;th&gt;作用&lt;/th&gt;&lt;th&gt;输出文件的默认后缀&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-E&lt;/td&gt;&lt;td&gt;只完成预处理过程&lt;/td&gt;&lt;td&gt;.i&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-S&lt;/td&gt;&lt;td&gt;在以上选项的基础上完成编译，生成汇编代码&lt;/td&gt;&lt;td&gt;.s&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-c&lt;/td&gt;&lt;td&gt;在以上选项的基础上完成汇编，生成机器码（此时输出的文件还不能运行）&lt;/td&gt;&lt;td&gt;.o&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-O0&lt;/td&gt;&lt;td&gt;输出给定源文件的所有依赖关系&lt;/td&gt;&lt;td&gt; - &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-O，-O1&lt;/td&gt;&lt;td&gt;输出给定源文件的所有依赖关系&lt;/td&gt;&lt;td&gt; - &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-O2&lt;/td&gt;&lt;td&gt;输出给定源文件的所有依赖关系&lt;/td&gt;&lt;td&gt; - &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-O3&lt;/td&gt;&lt;td&gt;在以上的基础上&lt;/td&gt;&lt;td&gt; - &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-Os&lt;/td&gt;&lt;td&gt;输出最小的可执行文件&lt;/td&gt;&lt;td&gt; - &lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;-M&lt;/td&gt;&lt;td&gt;输出给定源文件的所有依赖关系&lt;/td&gt;&lt;td&gt; - &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-MM&lt;/td&gt;&lt;td&gt;输出给定源文件的除了标准库头文件之外的依赖关系&lt;/td&gt;&lt;td&gt; - &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-MD&lt;/td&gt;&lt;td&gt;输出给定源文件的所有依赖关系，同时编译生成可执行文件&lt;/td&gt;&lt;td&gt;.d(依赖关系文件) .out(可执行文件)&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;</summary><category term="Linux"></category><category term="C"></category><category term="GCC"></category></entry><entry><title>解决KDE应用菜单不显示wine程序组的问题</title><link href="/jie-jue-kdeying-yong-cai-dan-bu-xian-shi-winecheng-xu-zu-de-wen-ti.html" rel="alternate"></link><updated>2013-08-19T00:00:00Z</updated><author><name></name></author><id>tag:,2013-08-19:jie-jue-kdeying-yong-cai-dan-bu-xian-shi-winecheng-xu-zu-de-wen-ti.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;KDE版本：4.10.5&lt;/li&gt;
&lt;li&gt;wine版本：1.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;刚用wine装了几个程序，发现K应用菜单里面没有wine程序的这个分类，wine程序全部跑到 &lt;code&gt;Lost + Found&lt;/code&gt; 这分组去了。上网搜索一番，没找到问题原因的描述，就找到下面的解决方法，似乎是因为wine没有修改到KDE使用的造成的？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;menus&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;applications&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;merged&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;menus&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kde&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;applications&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;merged&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Linux"></category><category term="KDE"></category><category term="Archlinux"></category></entry><entry><title>在Arch中安装和使用virtualenv</title><link href="/zai-archzhong-an-zhuang-he-shi-yong-virtualenv.html" rel="alternate"></link><updated>2013-08-11T00:00:00Z</updated><author><name></name></author><id>tag:,2013-08-11:zai-archzhong-an-zhuang-he-shi-yong-virtualenv.html</id><summary type="html">&lt;p&gt;刚刚换到Arch，发现不少东西操作都有点变化。想当然已经解决不了问题了x_x，遂将其记下来。&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;在Arch仓库里面有俩个&lt;code&gt;virtualenv&lt;/code&gt;,根据需要安装即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# pacman -S python2-virtualenv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# pacman -S python-virtualenv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;前者对应的是python2,后者python3。命令行命令分别是&lt;code&gt;virtualenv2&lt;/code&gt;和&lt;code&gt;virtualenv&lt;/code&gt;。&lt;/p&gt;
&lt;h2&gt;使用&lt;/h2&gt;
&lt;p&gt;首先为&lt;code&gt;virtualenv&lt;/code&gt;创建一个目录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;virtualenvs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my_env&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建虚拟环境&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;virtualenv2&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;virtualenvs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my_env&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;激活环境以供使用（就这步和关闭虚拟环境跟windows下面不一样，让我撞墙好久）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;virtualenvs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my_env&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后你就可以在虚拟环境里面用&lt;code&gt;pip&lt;/code&gt;安装你需要的包，以及干各种事情啦。&lt;/p&gt;
&lt;p&gt;最后是离开虚拟环境&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;deactivate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://wiki.archlinux.org/index.php/Python_VirtualEnvb"&gt;Arch Wiki:Python VirtualEnv&lt;/a&gt;&lt;/p&gt;</summary><category term="Linux"></category><category term="Arch"></category><category term="Python"></category></entry><entry><title>通过字体文件给Arch安装字体</title><link href="/tong-guo-zi-ti-wen-jian-gei-archan-zhuang-zi-ti.html" rel="alternate"></link><updated>2013-08-10T00:00:00Z</updated><author><name></name></author><id>tag:,2013-08-10:tong-guo-zi-ti-wen-jian-gei-archan-zhuang-zi-ti.html</id><summary type="html">&lt;p&gt;适用情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搬运windows那边的字体到Arch&lt;/li&gt;
&lt;li&gt;安装从网上下载的字体文件&lt;/li&gt;
&lt;li&gt;其它需要手动安装字体文件的情况&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Arch的字体目录为&lt;code&gt;/usr/share/fonts&lt;/code&gt;，安装字体时建议在这里建立单独的文件夹来存放手动安装的字体(比如这里建立了一个winfont文件夹)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;winfont&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将你要安装的字体文件复制到&lt;code&gt;/usr/share/fonts&lt;/code&gt;下你建立的文件夹中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;winfont&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;（注意这些字体文件的访问权限，至少要普通用户可读才行，否则就用&lt;code&gt;chmod&lt;/code&gt;修改一下文件权限）&lt;/p&gt;
&lt;p&gt;然后执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;mkfontscale&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;mkfontdir&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;fc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fsv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样就安装完成了。&lt;/p&gt;</summary><category term="Linux"></category><category term="Arch"></category><category term="font"></category></entry><entry><title>翻译：pelican-themes官方文档</title><link href="/fan-yi-pelican-themesguan-fang-wen-dang.html" rel="alternate"></link><updated>2013-07-12T00:00:00Z</updated><author><name></name></author><id>tag:,2013-07-12:fan-yi-pelican-themesguan-fang-wen-dang.html</id><summary type="html">&lt;p&gt;这段时间倒腾主题，干到最后，发现仅仅改CSS无法让我满意，遂打算开始定制模板，说到主题，还是得先读文档，由于经常用到 &lt;strong&gt;pelican-themes&lt;/strong&gt;，就顺便做个翻译便于查阅，同时根据我的理解进行了一点补充说明，这是本人第一次做翻译内容如有不当之处还请多多指正~&lt;/p&gt;
&lt;h1&gt;pelican-themes&lt;/h1&gt;
&lt;h2&gt;描述&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;pelican-themes&lt;/strong&gt; 是一个用来管理Pelican主题的命令行工具。&lt;/p&gt;
&lt;h3&gt;用法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;theme&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="p"&gt;...]]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;theme&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;...]]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;theme&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="p"&gt;...]]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;–&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;可选参数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-h&lt;/code&gt;,&lt;code&gt;--help&lt;/code&gt; 显示帮助&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt;, &lt;code&gt;--list&lt;/code&gt; 显示已安装的主题&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-i theme_path&lt;/code&gt; , &lt;code&gt;--install theme_path&lt;/code&gt; 安装一个或多个主题&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-r theme_name&lt;/code&gt; , &lt;code&gt;--remove theme_name&lt;/code&gt; 卸载一个或多个主题&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-s theme_path&lt;/code&gt; , &lt;code&gt;--symlink theme_path&lt;/code&gt; 和 &lt;code&gt;–install&lt;/code&gt; 一样都是安装,但是只创建一个符号链接，并不会复制主题目录，对主题开发很有用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v&lt;/code&gt; , &lt;code&gt;--verbose&lt;/code&gt; 显示详细输出信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--version&lt;/code&gt; 显示版本&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;译者补充&lt;/p&gt;
&lt;p&gt;平常用 &lt;code&gt;-i theme_path&lt;/code&gt; 安装主题的时候，&lt;em&gt;theme_path&lt;/em&gt; 整个目录会被复制到pelican的目录下，并且pelican编译时使用的主题也是pelican目录下那份，如果用 &lt;code&gt;-s theme_path&lt;/code&gt; 安装主题的话，就不会有复&amp;gt;制的过程，pelican编译时直接使用 &lt;em&gt;theme_path&lt;/em&gt; 中的主题文件，显然这样对于一个正在制作过程中的主题进行“调试”与修改来得方便的多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;示例&lt;/h2&gt;
&lt;h3&gt;列出已安装的主题&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;pelican-themes&lt;/code&gt; 命令，通过 &lt;code&gt;-l&lt;/code&gt; 或 &lt;code&gt;--list&lt;/code&gt; 选项可以列出已经安装的主题&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;notmyidea&lt;br /&gt;
two-column@&lt;br /&gt;
simple  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;notmyidea&lt;br /&gt;
two-column@&lt;br /&gt;
simple  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在本例中，我们可以看到有三个可用的主题： &lt;code&gt;notmyidea&lt;/code&gt; , &lt;code&gt;simple&lt;/code&gt;  和 &lt;code&gt;two-column&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;two-column&lt;/code&gt; 被添加了一个前缀 &lt;code&gt;@&lt;/code&gt; ,因为这个主题没有被复制到pelican的主题目录，而是仅仅创建了一个符号链接（详见后文 &lt;strong&gt;创建符号链接&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;注意，你可以把 &lt;code&gt;--list&lt;/code&gt; 与 &lt;code&gt;-v&lt;/code&gt; 或与 &lt;code&gt;--verbose&lt;/code&gt; 选项结合起来以获得更加详细的输出，像这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;/usr/local/lib/python2.6/dist-packages/pelican-2.6.0-py2.6.egg/pelican/themes/notmyidea&lt;br /&gt;
/usr/local/lib/python2.6/dist-packages/pelican-2.6.0-py2.6.egg/pelican/themes/two-column (symbolic link to `/home/skami/Dev/Python/pelican-themes/two-column')&lt;br /&gt;
/usr/local/lib/python2.6/dist-packages/pelican-2.6.0-py2.6.egg/pelican/themes/simple  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;安装主题&lt;/h3&gt;
&lt;p&gt;你可以使用 &lt;code&gt;-i&lt;/code&gt; 或 &lt;code&gt;--install&lt;/code&gt; 选项来安装一个或多个主题。这个选项需要你想安装的主题的目录作为参数，而且可以与 &lt;code&gt;--verbose&lt;/code&gt; 或 &lt;code&gt;-v&lt;/code&gt; 选项结合使用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# pelican-themes --install ~/Dev/Python/pelican-themes/notmyidea-cms --verbose&lt;/span&gt;

&lt;span class="cp"&gt;# pelican-themes --install ~/Dev/Python/pelican-themes/notmyidea-cms\&lt;/span&gt;
&lt;span class="cp"&gt;                           ~/Dev/Python/pelican-themes/martyalchin \&lt;/span&gt;
&lt;span class="cp"&gt;                           --verbose&lt;/span&gt;

&lt;span class="cp"&gt;# pelican-themes -vi ~/Dev/Python/pelican-themes/two-column&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;卸载主题&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pelican-themes&lt;/code&gt; 命令还可以卸载安装在pelican主题目录中的主题。使用 &lt;code&gt;-r&lt;/code&gt; 或 &lt;code&gt;-remove&lt;/code&gt; 选项并提供要卸载的主题名字作为参数来卸载一个或多个主题，该选项也可以与 &lt;code&gt;--verbose&lt;/code&gt; 或 &lt;code&gt;-v&lt;/code&gt; 选项结合使用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# pelican-themes --remove two-column&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/pre&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# pelican-themes -r martyachin notmyidea-cmd -v&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;创建符号链接&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pelican-themes&lt;/code&gt; 可以通过创建符号链接来安装主题，这样就不需要将需要安装的主题整个复制到pelican主题的目录下。&lt;/p&gt;
&lt;p&gt;你可以用 &lt;code&gt;-s&lt;/code&gt; 或 &lt;code&gt;-symlink&lt;/code&gt; 选项来对一个主题进行符号链接，这样安装的主题使用起来与用 &lt;code&gt;--install&lt;/code&gt; 选项安装的主题没啥区别。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# pelican-themes --symlink ~/Dev/Python/pelican-themes/two-column&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;本例中，&lt;code&gt;two-column&lt;/code&gt; 这个主题被符号链接到了pelican主题目录，所以现在就能直接使用了，而且我们还能在调整这个主题的同时不需要反复重新安装它。&lt;/p&gt;
&lt;p&gt;这对主题开发很有用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Blog&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;firefox&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Pelican&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;coumn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Blog&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Pelican&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;coumn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Blog&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Pelican&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;coumn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Blog&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;在一条命令中执行多个操作&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;--install&lt;/code&gt; , &lt;code&gt;--remove&lt;/code&gt; 和 &lt;code&gt;--symlink&lt;/code&gt; 选项不是互斥的，所以你可以在一条命令中把它们结合起来，从而在一条命令中干更多的事情。像这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# pelican-themes --remove notmyidea-cms two-column \&lt;/span&gt;
&lt;span class="cp"&gt;                 --install ~/Dev/Python/pelican-themes/notmyidea-cms-fr \&lt;/span&gt;
&lt;span class="cp"&gt;                 --symlink ~/Dev/Python/pelican-themes/two-column \&lt;/span&gt;
&lt;span class="cp"&gt;                 --verbose&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这个例子中，主题 &lt;code&gt;notmyidea-cms&lt;/code&gt; 被 &lt;code&gt;notmyidea-cms-fr&lt;/code&gt;替代了。&lt;/p&gt;
&lt;h2&gt;参见&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.notmyidea.org/alexis/pelican/"&gt;http://docs.notmyidea.org/alexis/pelican/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/share/doc/pelican/&lt;/code&gt; 如果你用 &lt;a href="http://skami18.github.com/pelican-packages/"&gt;APT repository&lt;/a&gt; 安装了Pelican&lt;/li&gt;
&lt;li&gt;原版文档：&lt;a href="http://docs.getpelican.com/en/latest/pelican-themes.html" title="pelican-themes documentation"&gt;http://docs.getpelican.com/en/latest/pelican-themes.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Blog"></category><category term="Pelican"></category><category term="Translation"></category></entry><entry><title>翻译：如何为pelican制作主题（无限修订中）</title><link href="/fan-yi-ru-he-wei-pelicanzhi-zuo-zhu-ti-wu-xian-xiu-ding-zhong.html" rel="alternate"></link><updated>2013-07-12T00:00:00Z</updated><author><name></name></author><id>tag:,2013-07-12:fan-yi-ru-he-wei-pelicanzhi-zuo-zhu-ti-wu-xian-xiu-ding-zhong.html</id><summary type="html">&lt;p&gt;好吧，要做主题，这才是真正开始。&lt;/p&gt;
&lt;p&gt;翻译的时候好多地方都不知道怎么表达，望大神指点。&lt;/p&gt;
&lt;h1&gt;如何为Pelican制作主题&lt;/h1&gt;
&lt;p&gt;Pelican使用著名的 &lt;a href="http://jinja.pocoo.org/"&gt;Jinja2&lt;/a&gt; 模板引擎来生成它的HTML输出。Jinja2的语法非常简单。如果你想要制作你自己的主题，随意看看 &lt;a href="https://github.com/getpelican/pelican/tree/master/pelican/themes/simple/templates" title=" “simple” theme "&gt;“simple”主题&lt;/a&gt; 或许能给你一些灵感。&lt;/p&gt;
&lt;h2&gt;主题的结构&lt;/h2&gt;
&lt;p&gt;制作主题时，你必须遵守下列结构&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;├────&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;css&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;images&lt;/span&gt;
&lt;span class="err"&gt;└────&lt;/span&gt; &lt;span class="n"&gt;templates&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;archives&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="c1"&gt;// 用来显示文章存档&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;period_archives&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;  &lt;span class="c1"&gt;//用来显示根据时间段划分的文章存档&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;  &lt;span class="c1"&gt;// 用来处理每篇文章的页面&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;   &lt;span class="c1"&gt;// 用来处理各个作者的页面&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;  &lt;span class="c1"&gt;// 必须列出所有作者&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;   &lt;span class="c1"&gt;// 必须列出所有目录&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="c1"&gt;// 用来处理各个目录&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="c1"&gt;// Index页面，列出所有文章&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="c1"&gt;// 用来处理每个page&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;  &lt;span class="c1"&gt;// 用来处理每个标签&lt;/span&gt;
    &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="c1"&gt;// 必须列出所有标签，可以是标签云&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;_static_包含了所有的静态文件，最后会被复制到输出中的_theme_目录下。我把CSS和image目录放在了这里，不过这只是举例，把你需要的东西放在这里。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;templates&lt;/em&gt; 包含了所有被用来生成页面的模板。我只在这里存放了必需的模板，你可以自己定义对你来说有用的模板。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;模板与变量&lt;/h2&gt;
&lt;p&gt;我们的想法是使用可以嵌入进HTML的简单语法。这个文件描述了哪些模板存在于主题中，哪些变量将会在生成时被传递给每个模板。&lt;/p&gt;
&lt;p&gt;所有的模板都会接收到你在设置文件中定义的全部大写的变量。你可以直接访问这些变量。&lt;/p&gt;
&lt;h3&gt;公共变量&lt;/h3&gt;
&lt;p&gt;这些设置对所有模板都有效。&lt;/p&gt;
&lt;table border-collapse=collapse&gt;
&lt;tr&gt;&lt;th&gt;变量&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;output_file&lt;/td&gt;&lt;td&gt;正在生成的文件的名字。举个例子，Pelican渲染主页的时候，output_file将会是“index.html”.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;articles&lt;/td&gt;&lt;td&gt;文章列表，依日期降序排列所有类型为&lt;em&gt;Aritcle&lt;/em&gt;对象的元素，你可以访问它们的属性（比如标题，概要，作者…）。有时会被屏蔽（例如在tags页面中）。你可以在变量&lt;em&gt;all_articles &lt;/em&gt;中找到关于它的信息。&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;dates&lt;/td&gt;&lt;td&gt;同样是文章列表，不过是依日期升序排列。&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;tags&lt;/td&gt;&lt;td&gt;一个包含数个(tag,articles)元组的列表。包含了所有的标签和使用特定标签的所有文章的列表构成的元组。&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;categories&lt;/td&gt;&lt;td&gt;一个包含数个(category,articles)元组的列表。包含了所有分类和在特定分类下所有文章的列表构成的元组。&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;pages&lt;/td&gt;&lt;td&gt;pages的列表&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h3&gt;排序&lt;/h3&gt;
&lt;p&gt;URL wrappers (currently categories, tags, and authors), have comparison methods that allow them to be easily sorted by name:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;articles&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你想依照其它标准进行排序, &lt;a href="http://jinja.pocoo.org/docs/templates/#sort" title="Jinja’s sort command "&gt;Jinja 的 sort 命令&lt;/a&gt; 拥有很多选项。&lt;/p&gt;
&lt;h3&gt;日期格式化&lt;/h3&gt;
&lt;p&gt;Pelican依据你的设置和区域(&lt;code&gt;DATE_FORMATS&lt;/code&gt;/&lt;code&gt;DEFAULT_DATE_FORMAT&lt;/code&gt;)来提供一个&lt;code&gt;locale_date&lt;/code&gt;属性。另一方面，&lt;code&gt;date&lt;/code&gt;属性蒋成为一个&lt;code&gt;datetime&lt;/code&gt;对象。如果你需要与当前设置不同的日期格式，使用Pelican自带的Jinja过滤器&lt;code&gt;strftime&lt;/code&gt;，用法和Python中的 &lt;a href="http://docs.python.org/2/library/datetime.html#strftime-strptime-behavior"&gt;strftime&lt;/a&gt; 是一样的，过滤器会正确地根据你设置的区域正确地对日期进行格式化。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;index.html&lt;/h3&gt;
&lt;p&gt;这是博客的主页，生成到 output/index.html 。&lt;/p&gt;
&lt;p&gt;如果启用了分页，后续的页面会被保存在 output/index`n`.html 。&lt;/p&gt;
&lt;table border-collapse=collapse&gt;
&lt;tr&gt;&lt;th&gt;变量&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;articles_paginator&lt;/td&gt;&lt;td&gt;一个用来处理文章列表的paginator对象&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;articles_page&lt;/td&gt;&lt;td&gt;文章列表的当前页面&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;dates_paginator&lt;/td&gt;&lt;td&gt;一个用来处理文章的paginator对象，依照日期升序进行排序&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;dates_page&lt;/td&gt;&lt;td&gt;文章列表的当前页面，依照日期升序排列&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;page_name&lt;/td&gt;&lt;td&gt;“索引” - 很有用的分页链接&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h3&gt;author.html&lt;/h3&gt;
&lt;p&gt;这个模板将用来处理每个作者的页面，输出为output/author/&lt;em&gt;author_name&lt;/em&gt;.html。&lt;/p&gt;
&lt;table border-collapse=collapse&gt;
&lt;tr&gt;&lt;th&gt;变量&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;author&lt;/td&gt;&lt;td&gt;作者名&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;articles&lt;/td&gt;&lt;td&gt;该作者的文章&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;dates&lt;/td&gt;&lt;td&gt;该作者的文章，依日期升序排序&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;articles_paginator&lt;/td&gt;&lt;td&gt;一个用于文章列表的paginator对象&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;articles_page&lt;/td&gt;&lt;td&gt;文章的当前页&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;dates_paginator&lt;/td&gt;&lt;td&gt;一个用于文章列表的paginator对象，依日期升序排序/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;dates_page&lt;/td&gt;&lt;td&gt;文章的当前页，依日期升序排序&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;page_name&lt;/td&gt;&lt;td&gt;AUTHOR_URL：在{slug}后面的一切都被去掉了 - 对分页链接很有用&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h3&gt;category.html&lt;/h3&gt;
&lt;p&gt;这个模板会用来处理每个分类，输出为output/category/&lt;em&gt;category_name&lt;/em&gt;.html。&lt;/p&gt;
&lt;p&gt;如果启用了分页，后续的页面将依照CATEGORY_SAVE_AS(默认值: output/category/&lt;em&gt;category_name&lt;/em&gt;’n’.html)输出。&lt;/p&gt;
&lt;table border-collapse=collapse&gt;
&lt;tr&gt;&lt;th&gt;变量&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;category&lt;/td&gt;&lt;td&gt;目录名&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;articles&lt;/td&gt;&lt;td&gt;该目录的文章&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;dates&lt;/td&gt;&lt;td&gt;该目录的文章，按日期升序排列&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;articles_paginator&lt;/td&gt;&lt;td&gt;一个文章列表的paginator对象&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;articles_page&lt;/td&gt;&lt;td&gt;文章的当前页&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;dates_paginator&lt;/td&gt;&lt;td&gt;一个文章列表的paginator对象，按日期升序排列&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;dates_page&lt;/td&gt;&lt;td&gt;文章当前页，按日期升序排列&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;page_name&lt;/td&gt;&lt;td&gt;CATEGORY\_URL:在{slug}后面的一切都被去掉了 - 对分页链接很有用&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h3&gt;article.html&lt;/h3&gt;
&lt;p&gt;这个模板用来处理每篇文章，输出为output/&lt;em&gt;article_name&lt;/em&gt;.html。这里是它特有的变量。&lt;/p&gt;
&lt;table border-collapse=collapse&gt;
&lt;tr&gt;&lt;th&gt;变量&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;article&lt;/td&gt;&lt;td&gt;要被显示的article对象&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;category&lt;/td&gt;&lt;td&gt;当前文章所属分类的名称&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h3&gt;page.html&lt;/h3&gt;
&lt;p&gt;这个模板用来处理每个page页面，相应输出为output/&lt;em&gt;page_name&lt;/em&gt;.html。&lt;/p&gt;
&lt;table border-collapse=collapse&gt;
&lt;tr&gt;&lt;th&gt;变量&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;page&lt;/td&gt;&lt;td&gt;要显示的page对象，你可以访问它的标题，slug和内容&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h3&gt;tag.html&lt;/h3&gt;
&lt;p&gt;这个模板用来处理各个标签，相应的输出为output/tag/&lt;em&gt;tag_name&lt;/em&gt;.html。&lt;/p&gt;
&lt;p&gt;如果启用了分页，后续的页面将依照TAG_SAVE_AS(默认值: output/tag/&lt;em&gt;tag_name&lt;/em&gt;’n’.html)输出。&lt;/p&gt;
&lt;table border-collapse=collapse&gt;
&lt;tr&gt;&lt;th&gt;变量&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;tag&lt;/td&gt;&lt;td&gt;标签名&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;articles&lt;/td&gt;&lt;td&gt;与该标签相关的文章&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;dates&lt;/td&gt;&lt;td&gt;与该标签相关的文章，依照日期升序排序&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;articles_paginator&lt;/td&gt;&lt;td&gt;一个文章列表的paginator对象&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;articles_page&lt;/td&gt;&lt;td&gt;文章当前所在页&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;dates_paginator&lt;/td&gt;&lt;td&gt;一个文章列表的paginator对象，依照日期升序排序&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;dates_page&lt;/td&gt;&lt;td&gt;文章当前所在页，依照日期升序排序&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;page_name&lt;/td&gt;&lt;td&gt;TAG_URL：在{slug}后面的一切都被去掉了 - 对分页链接很有用&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h2&gt;Feeds&lt;/h2&gt;
&lt;p&gt;feed变量在3.0版本(译者注：指Pelican，下同)中有所改变，现在每个变量在名字中显式列出是ATOM还是RSS。ATOM依然是默认的。旧主题可能因此需要更新。下面是所有的feed变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FEED_ATOM&lt;/li&gt;
&lt;li&gt;FEED_RSS&lt;/li&gt;
&lt;li&gt;FEED_ALL_ATOM&lt;/li&gt;
&lt;li&gt;FEED_ALL_RSS&lt;/li&gt;
&lt;li&gt;CATEGORY_FEED_ATOM&lt;/li&gt;
&lt;li&gt;CATEGORY_FEED_RSS&lt;/li&gt;
&lt;li&gt;TAG_FEED_ATOM&lt;/li&gt;
&lt;li&gt;TAG_FEED_RSS&lt;/li&gt;
&lt;li&gt;TRANSLATION_FEED_ATOM&lt;/li&gt;
&lt;li&gt;TRANSLATION_FEED_RSS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;继承&lt;/h2&gt;
&lt;p&gt;自从3.0版本开始，Pelican支持继承&lt;code&gt;simlpe&lt;/code&gt;主题，你可以在你的主题里面重用&lt;code&gt;simple&lt;/code&gt;主题中的模板。&lt;/p&gt;
&lt;p&gt;如果你的&lt;code&gt;templates/&lt;/code&gt;目录下的某个__必需模板__丢失了，它将被&lt;code&gt;simple&lt;/code&gt;主题中的对应模板替代。因此，如果&lt;code&gt;simple&lt;/code&gt;主题中的模板的HTML结构是适合你的，你就不需要从头写一个全新的模板。&lt;/p&gt;
&lt;p&gt;你也可以在你的主题中对&lt;code&gt;simple&lt;/code&gt;主题的模板进行扩展，像下面这个例子中一样使用&lt;code&gt;{% extends %}&lt;/code&gt;来实现。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;!simple/index.html&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;   &amp;lt;!-- extends the ``index.html`` template from the ``simple`` theme --&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;   &amp;lt;!-- &amp;quot;regular&amp;quot; extending --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;例子&lt;/h3&gt;
&lt;p&gt;通过这个机制，你可以仅仅用两个文件来创建一个主题。&lt;/p&gt;
&lt;h3&gt;base.html&lt;/h3&gt;
&lt;p&gt;第一个文件是&lt;code&gt;templates/base.html&lt;/code&gt;模板：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;!simple/base.html&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;head&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;   &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITEURL&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;/theme/css/style.css&amp;quot; /&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;在第一行，我们扩展了&lt;code&gt;simple&lt;/code&gt;主题中的&lt;code&gt;base.html&lt;/code&gt;，所以我们不需要重写整个文件。&lt;/li&gt;
&lt;li&gt;第三行，我们开始了在simple主题中定义好的 &lt;code&gt;head&lt;/code&gt; 块。&lt;/li&gt;
&lt;li&gt;第四行，&lt;code&gt;super()&lt;/code&gt; 函数保持先前插入的&lt;code&gt;head&lt;/code&gt; 块不结束。&lt;/li&gt;
&lt;li&gt;第五行，我们为页面添加了一个样式表。&lt;/li&gt;
&lt;li&gt;最后一行，我们结束了&lt;code&gt;head&lt;/code&gt; 块。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个文件将被所有其它的模板（译者注：tags.html，articles.html…）扩展，所以样式表会被连接到所有页面中。&lt;/p&gt;
&lt;h3&gt;style.css&lt;/h3&gt;
&lt;p&gt;第二个文件就是&lt;code&gt;static/css/style.css&lt;/code&gt;CSS样式表：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;family&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;monospace&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;white&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;padding&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;em&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;margin&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;border&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;thin&lt;/span&gt; &lt;span class="n"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;gray&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;display&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nl"&gt;a:&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;decoration&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;none&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;a:&lt;/span&gt;&lt;span class="n"&gt;hover&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;decoration&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;underline&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;a:&lt;/span&gt;&lt;span class="n"&gt;visited&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;                               &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;h1&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inherit&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;important&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;h2&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inherit&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;important&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;h3&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inherit&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;important&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;h4&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inherit&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;important&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;h5&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inherit&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;important&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;h6&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inherit&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;important&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;pre&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;margin&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;em&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;em&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;em&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;em&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;#menu li {&lt;/span&gt;
    &lt;span class="n"&gt;display&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;#post-list {&lt;/span&gt;
    &lt;span class="n"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bottom&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;em&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;em&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;下载&lt;/h3&gt;
&lt;p&gt;你可以从&lt;a href="http://docs.getpelican.com/en/latest/_downloads/theme-basic.zip"&gt;这里&lt;/a&gt;下载这个样例主题&lt;/p&gt;
&lt;h3&gt;源文档&lt;/h3&gt;
&lt;p&gt;原文链接：&lt;a href="http://docs.getpelican.com/en/latest/themes.html" title="original-page"&gt;http://docs.getpelican.com/en/latest/themes.html&lt;/a&gt;&lt;/p&gt;</summary><category term="Blog"></category><category term="Pelican"></category><category term="Translation"></category></entry><entry><title>去掉Pelican生成的代码区块中的红框</title><link href="/qu-diao-pelicansheng-cheng-de-dai-ma-qu-kuai-zhong-de-hong-kuang.html" rel="alternate"></link><updated>2013-07-10T00:00:00Z</updated><author><name></name></author><id>tag:,2013-07-10:qu-diao-pelicansheng-cheng-de-dai-ma-qu-kuai-zhong-de-hong-kuang.html</id><summary type="html">&lt;p&gt;这几天折腾博客主题，无意间找到了最开始弄博客的时候代码区块中的一些字符会有红框框住的问题的原因。&lt;/p&gt;
&lt;p&gt;因为Pelican是使用pygment处理代码高亮的，而pygment的高亮颜色定义就在当前使用的主题目录中的&lt;code&gt;pygment.css&lt;/code&gt;这个文件里，&lt;strong&gt;要修改代码高亮的配色就要通过修改这个文件来实现&lt;/strong&gt;。现在打开它，可以看到里面是对代码的各种类型的内容的风格定义，其中有一行如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.highlight .err { border: 1px solid #FF0000 } /&lt;em&gt; Error &lt;/em&gt;/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据内容可以看出这是规定书写错误的代码的文本样式，可是平时代码中有的字符也会被识别成错误的代码，比如下面这句中的&lt;code&gt;@&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以就造成了代码块中时不时出现恼人的红框的问题，原因清楚了，现在要解决它就很容易了，直接删掉那行中的&lt;code&gt;border&lt;/code&gt;样式就可以了。如果你跟我一样完全不需要给这类代码规定特殊样式的话，直接删掉那行即可。&lt;/p&gt;</summary><category term="Pelican"></category><category term="CSS"></category><category term="pygment"></category></entry><entry><title>手动删除Windows上的服务程序</title><link href="/shou-dong-shan-chu-windowsshang-de-fu-wu-cheng-xu.html" rel="alternate"></link><updated>2013-06-26T00:00:00Z</updated><author><name></name></author><id>tag:,2013-06-26:shou-dong-shan-chu-windowsshang-de-fu-wu-cheng-xu.html</id><summary type="html">&lt;p&gt;好多软件在卸载的时候不会卸载自己安装的服务程序，而且不知道什么时候还会被继续装上，前些天莫名其妙被装上风行就是这情况。&lt;/p&gt;
&lt;p&gt;我先用&lt;code&gt;iobit unistaller&lt;/code&gt;把它卸载了，最后弄完发现系统进程里面竟然还有风行的服务程序，我打开进程目录一看，甚至连安装包都还在那个目录下面，而且这还是一个相当庞大的目录！&lt;/p&gt;
&lt;p&gt;二话不说，先把服务程序和安装程序都给加到HIPS的Block List中去，总之再也不想见到它，接下来就是删除这个风行制造的目录。&lt;/p&gt;
&lt;p&gt;之后还要在注册表中删除那个服务程序的键，否则的话你一直都会在系统的服务列表里面看到它。&lt;/p&gt;
&lt;p&gt;在注册表&lt;code&gt;LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services&lt;/code&gt;中找到你要删除的服务程序，直接删掉即可。&lt;/p&gt;</summary><category term="Windows"></category></entry><entry><title>博客诞生记:基于GitHub+Pelican创建博客的整个过程</title><link href="/bo-ke-dan-sheng-ji-ji-yu-githubpelicanchuang-jian-bo-ke-de-zheng-ge-guo-cheng.html" rel="alternate"></link><updated>2013-06-19T00:00:00Z</updated><author><name></name></author><id>tag:,2013-06-19:bo-ke-dan-sheng-ji-ji-yu-githubpelicanchuang-jian-bo-ke-de-zheng-ge-guo-cheng.html</id><summary type="html">&lt;p&gt;很早以前就想搭建一个独立博客，一点点的记录生活与学习，说到底，还不是是因为托管博客的限制颇多，编辑体验太差 +_+
本文记录了我建立博客的基本过程，希望能对想要建博客却跟我一样完全不懂web的小白有所帮助。&lt;/p&gt;
&lt;p&gt;阅读本文所需技能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;脑补精通 Lv1：脑补基础&lt;/li&gt;
&lt;li&gt;举一反三 Lv1：举一反三分之一&lt;/li&gt;
&lt;li&gt;英文掌握 Lv2：字母精通&lt;/li&gt;
&lt;li&gt;Linux掌握 Lv1：会开终端&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在谋划阶段，看了不少关于建博的路子，最后图简单我选择了用Pelican在GitHub上搭建博客的路子。&lt;/p&gt;
&lt;p&gt;整个过程所在平台：&lt;a href="http://www.chakra-linux.org/"&gt;Chakra Linux&lt;/a&gt;，Pelican版本：3.2.0&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;过程概要&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;在&lt;a href="https://github.com/"&gt;Github&lt;/a&gt;上创建工程&lt;/li&gt;
&lt;li&gt;安装配置pelican和git，以及准备工作&lt;/li&gt;
&lt;li&gt;开始写博客&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h1&gt;详细步骤&lt;/h1&gt;
&lt;h2&gt;在GitHub上创建工程&lt;/h2&gt;
&lt;p&gt;如果你还没有&lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt;账户，去注册一个~&lt;/p&gt;
&lt;p&gt;登录GitHub，点击页面顶部的显示你用户名位置右边的&lt;em&gt;创建新工程&lt;/em&gt; &lt;code&gt;(Create a new repo)&lt;/code&gt; 按钮，来到创建新工程页面&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./static/img/create-a-new-repo.png" /&gt;&lt;/p&gt;
&lt;p&gt;建立一个名为&lt;code&gt;xxx.github.com&lt;/code&gt;的工程，这里我用的是frantic1048，我已经创建好了，所以提示已存在。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./static/img/craate-a-new-repo2.png" /&gt;&lt;/p&gt;
&lt;p&gt;填写好工程名后，点击下方的&lt;em&gt;创建工程&lt;/em&gt;&lt;code&gt;（Create repository）&lt;/code&gt;按钮。&lt;/p&gt;
&lt;p&gt;接下来进入项目的设置页面，在&lt;code&gt;GitHub Pages&lt;/code&gt;这栏（我因为已经创建过页面了所以有提示"Your site is published at ......"），点击&lt;code&gt;Automatic Page Generator&lt;/code&gt;，接下来几步一路&lt;code&gt;continue&lt;/code&gt;就可以了，因为生成的页面在随后会被清空。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./static/img/auto-generator.png" /&gt;&lt;/p&gt;
&lt;p&gt;这步完成之后，通过&lt;code&gt;http://xxx.github.com/&lt;/code&gt;或者&lt;code&gt;http://xxx.github.io/&lt;/code&gt;就可以访问生成的页面了，如果你遇到404错误，别着急，第一次生成完大概十来分钟才能看到页面，这个时候先来看下一步吧。&lt;/p&gt;
&lt;h2&gt;安装配置pelican和git，以及准备工作&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;pelican的安装&lt;/strong&gt;:根据pelican官方的推荐，我使用pip安装，而pip的安装又依赖distribute,整合3方的安装指南，我使用的终端命令如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//python-distribute.org/distribute_setup.py&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;distribute_setup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;

&lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//raw.github.com/pypa/pip/master/contrib/get-pip.py&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;

&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;git的安装&lt;/strong&gt;：因为git本身在软件源中，直接用Chakra的软件包管理器pacman安装即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;pacman&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;配置git&lt;/strong&gt;：参考了GitHub的配置指南，设置好用户名和邮箱（这里的邮箱用的是你注册GitHub的那个邮箱）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Your Name Here&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;your_email@example.com&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;simple&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;安装ssh公钥&lt;/strong&gt;:用你在注册github时用的Email生成一个ssh公钥私钥对:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keygen&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;rsa&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;your_email@example.com&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Enter passphrase (empty for no passphrase): &lt;em&gt;输入你在github注册时使用的密码&lt;/em&gt;&lt;br /&gt;
Enter same passphrase again: &lt;em&gt;再输一次&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后会看到公钥和私钥分别被保存为&lt;code&gt;id_rsa&lt;/code&gt;和&lt;code&gt;id_rsa.pub&lt;/code&gt;，后者正是我们需要的。打开github网页，在账户设置&lt;code&gt;（Account settings）&lt;/code&gt;中找到&lt;em&gt;SSH keys&lt;/em&gt;项目，点击&lt;em&gt;添加SSH key&lt;/em&gt;&lt;code&gt;(Add SSH key)&lt;/code&gt;，把&lt;code&gt;idrsa.pub&lt;/code&gt;中的内容复制到网页中的key里面。现在回到终端测试一下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;The authenticity of host 'github.com (204.232.175.90)' can't be established.&lt;br /&gt;
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.&lt;br /&gt;
Are you sure you want to continue connecting (yes/no)? &lt;br /&gt;
Hi &lt;em&gt;username&lt;/em&gt;! You've successfully authenticated, but GitHub does not provide shell access.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看到这个内容的时候，就说明成功了，git配置至此完毕。&lt;/p&gt;
&lt;p&gt;现在在你的电脑上创建一个blog目录，用来存放你的博客文件(我这里目录名直接用的“blog”)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用pelican创建一个博客,按照提示一步一步进行，之后还可以在&lt;code&gt;pelicanconf.py&lt;/code&gt;这个文件中修改配置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;quickstart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Where do you want to create your new web site? [.]（你想在哪里创建你的网站，默认为当前目录）&lt;br /&gt;
What will be the title of this web site?（网站的标题是）&lt;br /&gt;
Who will be the author of this web site?（网站的作者是）&lt;br /&gt;
What will be the default language of this web site? [en]（网站的语言是），当然是中文啦，填‘zh’&lt;br /&gt;
Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) （是否指定域名），Y&lt;br /&gt;
What is your URL prefix? (see above example; no trailing slash) （输入域名，不能包含反斜杠‘/’），http://frantic1048.github.io&lt;br /&gt;
Do you want to enable article pagination?（是否启用文章分页）&lt;br /&gt;
Do you want to generate a Makefile to easily manage your website?（是否生成一个Makefile来管理网站）&lt;br /&gt;
Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development?（是否想有一个自动加载的小型http脚本用来修改主题和站点开发）&lt;br /&gt;
Do you want to upload your website using FTP?&lt;br /&gt;
Do you want to upload your website using SSH?&lt;br /&gt;
Do you want to upload your website using Dropbox?&lt;br /&gt;
Do you want to upload your website using S3?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个时候你会看到&lt;code&gt;blog&lt;/code&gt;目录下多了几个Pelican生成的文件，其中的&lt;code&gt;pelicanconf.py&lt;/code&gt;就是配置文件&lt;/p&gt;
&lt;p&gt;把你的项目clone到blog这个文件夹下面,并进入这个目录，这里我的项目文件夹为“frantic1048.github.com”  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/frantic1048/frantic1048.github.com&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;frantic1048&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;清空项目文件（因为之前使用&lt;code&gt;Automatic Page Generator&lt;/code&gt;创建出来了一堆不需要的东西）:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;  
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;orphan&lt;/span&gt; &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;开始写博客&lt;/h2&gt;
&lt;p&gt;现在，就可以用Pelican开始写博客了，具体怎么写可参看&lt;a href="http://docs.getpelican.com/en/3.1.1/"&gt;Pelican的文档&lt;/a&gt;，这里我用Markdown举例。  &lt;/p&gt;
&lt;p&gt;进入content目录，用编辑器创建一个文件，写入博客内容并保存为md文件：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Date: 2013-06-06 #日期&lt;br /&gt;
Title: My Super Beginng #标题&lt;br /&gt;
Tags: Writing, Life #标签&lt;br /&gt;
Category: Life #分类&lt;br /&gt;
文章内容  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;写好之后，回到blog目录，将md文件翻译成html静态页面：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;  
&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;[ ! -d /home/frantic/blog/output ] || find /home/frantic/blog/output -mindepth 1 -delete&lt;br /&gt;
pelican /home/frantic/blog/content -o /home/frantic/blog/output -s /home/frantic/blog/pelicanconf.py&lt;br /&gt;
Done: Processed 1 articles and 0 pages in 0.32 seconds.   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你还可以用这条命令编译：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意，如果你在这里遇到类似下面这样的错误信息，请检查一下你是否安装了markdown（我就是因为这个奇葩的错误提示闹腾了一个多小时），至于为什么这个提示的原因可能会是没安装markdown，参看这里的&lt;a href="https://github.com/getpelican/pelican/issues/876/"&gt;吐槽&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WARNING: Could not process /home/frantic/blog/content/First.md&lt;br /&gt;
'bool' object is not callable  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在把生成的页面复制到&lt;code&gt;xxx.github.com&lt;/code&gt;目录下，接下来就是上传啦！&lt;/p&gt;
&lt;p&gt;进入&lt;code&gt;xxx.github.com&lt;/code&gt;目录，提交文章到github：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;frantic1048&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;  
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;first blog&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;过一会儿之后，再访问&lt;code&gt;xxx.github.com&lt;/code&gt;,就能够看到你的博客诞生了！&lt;/p&gt;
&lt;p&gt;如果你有域名的话，还可以进行域名绑定，在github的项目根目录下创建一个名为“CNAME”的文件，在里面写入你的域名（比如我写的是&lt;code&gt;frantic1048.com&lt;/code&gt;）,然后push到github，之后进入你的域名服务商那边去，把你的域名对应的ip改成username.github.com对因的ip即可（比如我就填写的frantic1048.github.com对应的ip）接下来就可以用你的域名来访问你的博客了，有的域名服务器可能要过段时间才可以，我的是1分钟不到就能够访问了&lt;/p&gt;
&lt;h1&gt;后续：&lt;/h1&gt;
&lt;h2&gt;更改主题&lt;/h2&gt;
&lt;p&gt;Pelican本身提供了不少主题，同时也支持自己制作主题，你可以直接把github上pelican的主题全都clone下来&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/getpelican/pelican-themes.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在里面找到一个你喜欢的主题，假如这个主题的目录是 &lt;code&gt;~/pelican-themes/bootstrap2&lt;/code&gt; ，使用pelican-themes安装这个主题&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;  &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bootstrap2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;随后就可以用&lt;code&gt;pelican-themes&lt;/code&gt;查看已安装的主题&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;/usr/lib/python2.7/site-packages/pelican/themes/bootstrap2&lt;br /&gt;
/usr/lib/python2.7/site-packages/pelican/themes/notmyidea&lt;br /&gt;
/usr/lib/python2.7/site-packages/pelican/themes/simple  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要在你的博客中使用安装好的主题，直接在pelicanconf.py文件中修改或者添加&lt;code&gt;THEME&lt;/code&gt;项为想要的主题名,例如&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;THEME = "bootstrap2"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重新生成的页面现在使用的就是新指定的主题了&lt;/p&gt;
&lt;h2&gt;使用插件&lt;/h2&gt;
&lt;p&gt;Pelican 一开始是将插件内置的, 但是新版本 Pelican将插件隔离了出来, 所以我们要到github上 克隆一份新的插件, 在博客目录执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/getpelican/pelican-plugins.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在我们博客目录就新添了一个 pelican-plugins目录, 我们以配置sitemap插件为例,sitemap插件可以生成 sitemap.xml 供搜索引擎使用&lt;/p&gt;
&lt;p&gt;在pelicanconf.py配置文件里加上如下项:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PLUGIN_PATH = u"pelican-plugins"&lt;br /&gt;
PLUGINS = ["sitemap"]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;配置sitemap 插件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SITEMAP = { "format": "xml", "priorities": { "articles": 0.7, "indexes": 0.5, "pages": 0.3, }, "changefreqs": { "articles": "monthly", "indexes": "daily", "pages": "monthly", }}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后再执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就搞定了&lt;/p&gt;
&lt;h2&gt;添加评论支持&lt;/h2&gt;
&lt;p&gt;Pelican 使用Disqus评论, 可以在Disqus上申请一个站点, 然后在pelicanconf.py里添加或修改"DISQUS_SITENAME"项的内容为你的Disqus ID :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DISQUS_SITENAME = u"frantic1048"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;拷贝静态文件&lt;/h2&gt;
&lt;p&gt;如果我们定义静态的文件, 该如何将它在每次生成的时候拷贝到 output 目录呢, 我们以robots.txt 为例, 在我们的 content/extra 下面我们放了一个定义好的 robots.txt文件, 在pelicanconf.py更改或添加&lt;code&gt;FILES_TO_COPY&lt;/code&gt;项:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FILES_TO_COPY = ( ("extra/robots.txt", "robots.txt"),)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样在每次生成html的时候都会把 content/extra下的 robots.txt 拷贝到 output目录下。&lt;/p&gt;
&lt;h2&gt;拷贝静态目录&lt;/h2&gt;
&lt;p&gt;如果是一个静态目录呢?比如有个名为&lt;code&gt;img&lt;/code&gt;的目录用来放文章所使用的图片，我们可以在pelicanconf.py里添加或修改&lt;code&gt;STATIC_PATHS&lt;/code&gt;项：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;STATIC_PATHS = [u"img"]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后 Pelican 就会将&lt;code&gt;img&lt;/code&gt;目录拷贝到&lt;code&gt;output/static/&lt;/code&gt;下就大功告成了。&lt;/p&gt;</summary><category term="Life"></category><category term="Blog"></category><category term="Pelican"></category><category term="Github"></category></entry><entry><title>给windows添加用Notepad++打开的右键菜单</title><link href="/gei-windowstian-jia-yong-notepadda-kai-de-you-jian-cai-dan.html" rel="alternate"></link><updated>2013-06-17T00:00:00Z</updated><author><name></name></author><id>tag:,2013-06-17:gei-windowstian-jia-yong-notepadda-kai-de-you-jian-cai-dan.html</id><summary type="html">&lt;p&gt;操作很简单:&lt;/p&gt;
&lt;p&gt;创建一个文本文件,键入以下内容后保存为reg文件,最后双击添加注册表项即可&lt;/p&gt;
&lt;p&gt;注意:&lt;em&gt;最下面一行中的文件目录为你的电脑上的Notepad++可执行文件所在位置&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Windows Registry Editor Version 5.00

&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;HKEY_CLASSES_ROOT&lt;/span&gt;&lt;span class="k"&gt;\*\shell\notepad++]&lt;/span&gt;
&lt;span class="na"&gt;@&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Edit with Notepad++&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;HKEY_CLASSES_ROOT&lt;/span&gt;&lt;span class="k"&gt;\*\shell\notepad++\command]&lt;/span&gt;
&lt;span class="na"&gt;@&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\&amp;quot;C:\\Program Files (x86)\\notepad++\\notepad++.exe\&amp;quot; %1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;</summary><category term="Windows"></category></entry><entry><title>Windows下安装和使用Pelican</title><link href="/windowsxia-an-zhuang-he-shi-yong-pelican.html" rel="alternate"></link><updated>2013-06-17T00:00:00Z</updated><author><name></name></author><id>tag:,2013-06-17:windowsxia-an-zhuang-he-shi-yong-pelican.html</id><summary type="html">&lt;p&gt;最近几天尝试在Windows上面使用Pelican，刚开始也是直接想用pip安装，不料不少pelican依赖的包都没能下载。最后只好手动安装了这些没能自动装上的包。悲催的过程就不提了，就把需要手动安装的包列表记在这儿了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/blinker"&gt;blinker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/docutils"&gt;docutils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/feedgenerator"&gt;feedgenerator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/Jinja2"&gt;jinja2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/Markdown"&gt;markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/Pygments"&gt;pygments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/pytz"&gt;pytz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/setuptools"&gt;setuptools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/pelican"&gt;pelican&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一起下载下来解压到同一个文件夹，写个简单的批处理就一并安装了。另外我还发现Python3运行Pelican有点问题，解决所有依赖关系后运行pelican会出现 &lt;a href="http://stackoverflow.com/questions/17124129/cannot-import-name-signals-when-importing-pelican-on-windows" title="Stack Overflow 上该问题的详细描述"&gt;TypeError&lt;/a&gt;，后来我另外安装了Python2去运行就没有发现问题，目前还没能找到原因。&lt;/p&gt;
&lt;p&gt;如果你发现你在命令行中键入Pelican提示找不到命令，检查一下Python安装目录下的&lt;em&gt;Scripts&lt;/em&gt;子目录是否已经添加进了%Path%中。&lt;/p&gt;
&lt;p&gt;如果你已经有Pelican搭建的博客了，&lt;em&gt;记得确保你所使用的博客主题也已经安装在电脑上&lt;/em&gt;，否则Pelican会在编译的时候会出错，提示找不到主题。&lt;/p&gt;
&lt;p&gt;在Windows下面使用Pelican感觉编译之前的等待时间多了不少。&lt;/p&gt;</summary><category term="Blog"></category><category term="Life"></category><category term="Pelican"></category><category term="Windows"></category></entry><entry><title>My Super Beginng</title><link href="/my-super-beginng.html" rel="alternate"></link><updated>2013-06-06T00:00:00Z</updated><author><name></name></author><id>tag:,2013-06-06:my-super-beginng.html</id><summary type="html">&lt;p&gt;Frantic1048's Blog is beginning from NOW , HERE !&lt;/p&gt;</summary><category term="Life"></category><category term="Blog"></category></entry></feed>